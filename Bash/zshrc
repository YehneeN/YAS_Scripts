# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path Exports
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_ENV_HINTS=1
export PATH=$PATH:"$HOME/.local/bin:$HOME/.cargo/bin:/var/lib/flatpak/exports/bin:/.local/share/flatpak/exports/bin"
export PATH=$PATH:/home/rfontaine/.spicetify
export PATH=$PATH:/usr/local/go/bin

# Set the directory we want to store zinit and plugins
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download Zinit, if it's not there yet
if [ ! -d "$ZINIT_HOME" ]; then
   mkdir -p "$(dirname $ZINIT_HOME)"
   git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

# Source/Load zinit
source "${ZINIT_HOME}/zinit.zsh"

# Add in Powerlevel10k
zinit ice depth=1; zinit light romkatv/powerlevel10k

# Add in zsh plugins
zinit light Aloxaf/fzf-tab
zinit light zdharma-continuum/fast-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions

# Add in snippets
zinit snippet OMZP::git
zinit snippet OMZP::sudo
zinit snippet OMZP::command-not-found
zinit snippet OMZP::colored-man-pages

# Load completions
autoload -Uz compinit && compinit

zinit cdreplay -q

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Keybindings
# bindkey -e
bindkey "^[p" history-search-backward
bindkey "^[n" history-search-forward
bindkey "^[w" kill-region
bindkey "\e[1;5C" forward-word
bindkey "\e[1;5D" backward-word
bindkey "\e[3;5~" kill-word
bindkey -s "^f" "zi\n"

# History
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups
setopt notify

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --group-directories-first --icons --color=always $realpath'
zstyle ':fzf-tab:complete:z:*' fzf-preview 'eza -1 --group-directories-first --icons --color=always $realpath'
zstyle ':fzf-tab:complete:zz:*' fzf-preview 'eza -aD1 --group-directories-first --icons --color=always $realpath'
zstyle ':fzf-tab:complete:zza:*' fzf-preview 'eza -a1 --group-directories-first --icons --color=always $realpath'
zstyle ':fzf-tab:complete:zze:*' fzf-preview 'eza -alh --group-directories-first --icons --color=always $realpath'
# switch group using `<` and `>`
# zstyle ':fzf-tab:*' switch-group '<' '>'

# Shell integrations
eval "$(fzf --zsh)"
eval "$(zoxide init zsh)"

#######################################################
# SPECIAL FUNCTIONS
#######################################################

# Extracts any archive(s) (if unp isn't installed)
extract() {
	for archive in "$@"; do
		if [ -f "$archive" ]; then
			case $archive in
			*.tar.bz2) tar xvjf $archive ;;
			*.tar.gz) tar xvzf $archive ;;
			*.bz2) bunzip2 $archive ;;
			*.rar) rar x $archive ;;
			*.gz) gunzip $archive ;;
			*.tar) tar xvf $archive ;;
			*.tbz2) tar xvjf $archive ;;
			*.tgz) tar xvzf $archive ;;
			*.zip) unzip $archive ;;
			*.Z) uncompress $archive ;;
			*.7z) 7z x $archive ;;
			*) echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

# Searches for text in all files in the current folder
ftext() {
	# -i case-insensitive
	# -I ignore binary files
	# -H causes filename to be printed
	# -r recursive search
	# -n causes line number to be printed
	# optional: -F treat search term as a literal, not a regular expression
	# optional: -l only print filenames and not the matching lines ex. grep -irl "$1" *
	grep -iIHrn --color=always "$1" . | less -r
}

# Mise à jour Système
sys_update () {
	sudo nala update && sudo nala upgrade -y
}

cd() {
	if [ -n "$1" ]; then
		builtin cd "$1" && clear && eza -a --icons --group-directories-first
	else
		dir=$(find / -type d 2>/dev/null | fzf --preview 'tree -C {}')
		if [ -n "$dir" ]; then
			builtin cd "$dir" && clear && eza -a --icons --group-directories-first
		fi
	fi
}

# Copy and go to the directory
cpg() {
	if [ -d "$2" ]; then
		cp "$1" "$2" && cd "$2"
	else
		cp "$1" "$2"
	fi
}

# Move and go to the directory
mvg() {
	if [ -d "$2" ]; then
		mv "$1" "$2" && cd "$2"
	else
		mv "$1" "$2"
	fi
}

# Create and go to the directory
mkdirg() {
	mkdir -p "$1"
	cd "$1"
}

# Goes up a specified number of directories  (i.e. up 4)
up() {
	local d=""
	limit=$1
	for ((i = 1; i <= limit; i++)); do
		d=$d/..
	done
	d=$(echo $d | sed 's/^\///')
	if [ -z "$d" ]; then
		d=..
	fi
	cd $d
}

# Returns the last 2 fields of the working directory
pwdtail() {
	pwd | awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}

# IP address lookup
alias pubip="whatsmyip"
function whatsmyip ()
{
	# External IP Lookup
	echo -n "External IP: "
	curl -s ifconfig.me
}

# Automatically do an ls for directories after each zoxide
zza ()
{
	if [ -n "$1" ]; then
		__zoxide_z "$@" && eza -a --icons
	else
		__zoxide_z ~ && eza -a --icons
	fi
}

# Automatically do an ls for directories after each zoxide
zz ()
{
	if [ -n "$1" ]; then
		__zoxide_z "$@" && eza -aD --icons
	else
		__zoxide_z ~ && eza -aD --icons
	fi
}

# Automatically do an ls after each zoxide
zze ()
{
	if [ -n "$1" ]; then
		__zoxide_z "$@" && eza -alh --icons --group-directories-first
	else
		__zoxide_z ~ && eza -alh --icons --group-directories-first
	fi
}

#######################################################
# GENERAL ALIAS'S
#######################################################
# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#

# To temporarily bypass an alias, we precede the command with a \
# EG: the ls command is aliased, but to use the normal ls command you would type \ls


# Edit this .zshrc file
alias ezrc='kate ~/.zshrc'

# Change directory aliases
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# cd into the old directory
alias bd='cd "$OLDPWD"'

# Remove a directory and all files
alias rmd='/bin/rm  --recursive --force --verbose '

# Alias's eza lists
alias ls='eza -a --icons --group-directories-first' 			# add colors, icons, group directories
alias lf='eza -af --icons'  									# files only
alias ld='eza -aD --icons'										# directories only
alias ll='eza -alh --icons --group-directories-first'			# long listing format
alias lfiles='eza -alhf --icons'   								# long format, files only
alias ldirs='eza -alhD --icons'   								# long format, directories only
alias lx='eza -alhfs extension --icons '   						# sort files by extension
alias lk='eza -alhrs size --icons --group-directories-first'		# sort by size
alias lc='eza -alhrs changed --icons --group-directories-first'	# sort by change time
alias la='eza -alhrs accessed --icons --group-directories-first'	# sort by access time
alias lt='eza -alhrs created --icons --group-directories-first'	# sort by date
alias lr='eza -alR --icons --group-directories-first'	# recursive ls

# Alias's for eza trees
alias tree="eza -Ta --icons --group-directories-first"				# Tree all the way, use -L to control depth
alias treemin="eza -Ta --icons -L 2 --group-directories-first"		# Tree into 1 subfolder level
alias treed="eza -TaD --icons"										# Tree directories all the way, use -L to control depth
alias treedmin="eza -TaD --icons -L 2"								# Tree directories into 1 subfolder level							# Tree directories into 1 subfolder level

# Search command line history
alias h="history | grep "

# Search running processes
alias p="ps aux | grep "
alias topcpu="/bin/ps -eo pcpu,pid,user,args | sort -k 1 -r | head -10"

# Search files in the current folder
alias f="find . | grep "

# Count all files (recursively) in the current folder
alias countfiles="for t in files links directories; do echo \`find . -type \${t:0:1} | wc -l\` \$t; done 2> /dev/null"

# Show open ports
alias openports='netstat -nape --inet'

# Alias's for archives
alias mktar='tar -cvf'
alias mkbz2='tar -cvjf'
alias mkgz='tar -cvzf'
alias untar='tar -xvf'
alias unbz2='tar -xvjf'
alias ungz='tar -xvzf'

# Alias's to modified commands
alias cat="batcat"
alias cp='cp -i'
alias mv='mv -i'
alias rm='trash -v'
alias mkdir='mkdir -p'
alias ping='ping -c 10'
alias less='less -R'
alias apt='sudo apt-get'
alias nala="sudo nala"
alias vi='nvim'
alias svi='sudo vi'
alias vis='nvim "+set si"'
alias curl="curl -#"
alias goTrash="cd ~/.local/share/Trash"

# Personal Alias's
alias sht="sudo shutdown -P now"
alias rbt="sudo shutdown -r now"
alias wrbt="sudo grub-reboot 1 && reboot"
alias bios="sudo grub-reboot 2 && reboot"
alias ff="fastfetch"
alias zi="__zoxide_zi"
alias reload="source ~/.zshrc"
alias updt="nala update ; nala upgrade"
alias iptables="sudo iptables"
alias dl="z Téléchargements"
alias lg="lazygit"
alias msrv="~/SharedProjs/PubShare/.minisrv ~/SharedProjs/PubShare"




export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
